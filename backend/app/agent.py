import os
import re
import sqlite3
import json
import hashlib
import logging
from typing_extensions import TypedDict
from langchain.agents.agent_types import AgentType
from langchain.prompts import PromptTemplate
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
from langchain_community.utilities import SQLDatabase
from langchain_openai import ChatOpenAI
from langchain_core.agents import AgentFinish
from langgraph.graph import StateGraph
from langgraph.checkpoint.sqlite import SqliteSaver

# Constants
CHECKPOINT_DIR = "checkpoints"
CHECKPOINT_DB = "bdm_workflow.sqlite3"
DB_PATH = os.path.join(CHECKPOINT_DIR, CHECKPOINT_DB)

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')


# === ChatState Schema ===
class ChatState(TypedDict):
    email_content: str
    user_query: str
    summary: str

# === LLM Configuration (Gemma-3-27B via vLLM) ===
llm = ChatOpenAI(
    model="gemma-3-27b-it",
    openai_api_key="EMPTY",
    openai_api_base=os.getenv("VLLM_API_BASE")
)

# === Database Setup ===
DATABASE_URL = f"postgresql://{os.getenv('POSTGRES_USER')}:{os.getenv('POSTGRES_PASSWORD')}@{os.getenv('POSTGRES_HOST')}:{os.getenv('POSTGRES_PORT')}/{os.getenv('POSTGRES_DB')}"
db = SQLDatabase.from_uri(DATABASE_URL)
toolkit = SQLDatabaseToolkit(llm=llm, db=db)

# Add table info and foreign key hints
table_info = db.get_table_info()
table_info += """
-- Foreign key relationships:
- systeminfo.id → server.system_id
- lan_system_map.lan → system_lan_info.lan_key
- lan_system_map.id → systeminfo.id
- mlan_system_map.mlan → system_mlan_info.mlan_key
- mlan_system_map.id → systeminfo.id
- psu_system_map.psu → system_psu_info.psu_key
- psu_system_map.id → systeminfo.id
- server_pcie_map.pcieinfo → pcie_info.pcie_key
- server_pcie_map.(projectmodel, gbtsn) ↔ server.(projectmodel, gbtsn)
- storage_connector_map.connector → connector_info.connector_key
- storage_connector_map.id → storageinfo.id
- server_storage_map.id → storageinfo.id
- server_storage_map.(projectmodel, gbtsn) ↔ server.(projectmodel, gbtsn)
"""

# === SQL Agent Setup ===
agent = create_sql_agent(
    llm=llm,
    toolkit=toolkit,
    verbose=True,
    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors=True,   
)

# === Email-to-Query Prompt Template ===
email_parse_prompt = PromptTemplate.from_template("""
From the email below, extract a clear and concise query intention in English that describes what information the user wants from the database.
===
{email}
===
Only respond with the query intention.
""")

parse_chain = email_parse_prompt | llm

# === Heuristic Email Format Detection ===
def is_natural_query(text: str) -> bool:
    email_indicators = ["subject:", "dear", "regards", "best", "sincerely", "message", "thank you"]
    if any(word in text.lower() for word in email_indicators) or len(text.split("\n")) > 5:
        return False
    return True

# === Parse Email Content ===
def parse_email(state: ChatState) -> ChatState:
    email = state.get("email_content", "").strip()

    if is_natural_query(email):
        user_query = email
    else:
        response = parse_chain.invoke({"email": email})
        user_query = response.content.strip()

    return {
        "email_content": email,
        "user_query": user_query,
        "summary": state.get("summary", "")
    }

# === Run SQL Agent ===
def run_sql_agent(state: ChatState) -> ChatState:
    query = state.get("user_query", "")
    if not isinstance(query, str):
        raise ValueError("user_query must be a string")

    result = agent.invoke({"input": query})

    if isinstance(result, AgentFinish):
        summary = result.return_values.get("output", "")
    elif isinstance(result, dict) and "output" in result:
        summary = result["output"]
    else:
        summary = str(result)

    return {
        "email_content": state.get("email_content", ""),
        "user_query": query,
        "summary": summary
    }

# === Generate Email Response ===
def generate_email_reply(state: ChatState) -> ChatState:
    reply = f"""
    Dear Client,

    Thank you for your inquiry. Below is the summarized server information based on your request:
    {state.get('summary', '')}

    If you have any further questions, feel free to reach out.

    This email was automatically generated by BDM.chat assistant.
    """
    print("\n=== Generated Email Response ===\n")
    print(reply)
    return state

# === LangGraph Workflow with SQLite Checkpointer ===
def ensure_db_and_dir():
    os.makedirs(CHECKPOINT_DIR, exist_ok=True)
    return sqlite3.connect(DB_PATH, check_same_thread=False)

conn = ensure_db_and_dir()
checkpointer = SqliteSaver(conn)

graph = StateGraph(ChatState)
graph.add_node("parse_email", parse_email)
graph.add_node("run_sql_agent", run_sql_agent)
graph.add_node("generate_email_reply", generate_email_reply)

graph.set_entry_point("parse_email")
graph.add_edge("parse_email", "run_sql_agent")
graph.add_edge("run_sql_agent", "generate_email_reply")

workflow = graph.compile(checkpointer=checkpointer)

def normalize_content(email_content: str) -> str:
    # 標準化 email_content 以提升 thread_id 一致性
    normalized = email_content.lower()
    normalized = re.sub(r'\s+', ' ', normalized).strip()
    normalized = re.sub(r'[,.!?;:\'\"]', '', normalized)
    return normalized

def generate_thread_id(email_content: str) -> str:
    normalized_content = normalize_content(email_content)
    thread_id = "thread-" + hashlib.sha256(normalized_content.encode()).hexdigest()[:12]
    return thread_id

def get_existing_thread_ids():
    """
    回傳現有 thread_id 清單。
    """
    if not os.path.exists(DB_PATH):
        return []
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='checkpoints'")
            if not cursor.fetchone():
                return []
            cursor.execute("SELECT DISTINCT json_extract(configurable, '$.thread_id') FROM checkpoints")
            return [row[0] for row in cursor.fetchall() if row[0]]
    except Exception as e:
        logging.warning(f"Error getting thread IDs: {str(e)}")
        return []

# === Entry Function with thread_id ===
def run_agent_workflow(email_content: str, use_existing_checkpoint: bool = True, custom_thread_id: str = None):
    """
    處理 email_content，並根據 thread_id 決定是否復用 checkpoint。
    """
    thread_id = custom_thread_id if custom_thread_id else generate_thread_id(email_content)
    logging.info(f"Running with thread_id: {thread_id}")
    logging.info(f"Saving checkpoints to: {os.path.abspath(DB_PATH)}")
    logging.info(f"Using existing checkpoint: {use_existing_checkpoint}")

    existing_threads = get_existing_thread_ids()
    checkpoint_exists = os.path.exists(DB_PATH) and thread_id in existing_threads
    logging.info(f"Checkpoint exists for this thread_id: {checkpoint_exists}")

    new_state: ChatState = {
        "email_content": email_content,
        "user_query": "",
        "summary": ""
    }

    if checkpoint_exists and use_existing_checkpoint:
        try:
            cached_state = workflow.get_state({"configurable": {"thread_id": thread_id}})
            if cached_state and cached_state.get("summary"):
                logging.info("Using cached summary.")
                logging.info(f"Cached summary: {cached_state.get('summary')[:100]}...")
                new_state = cached_state
        except Exception as e:
            logging.warning(f"Could not retrieve state: {str(e)}")

    state = new_state
    config = {
        "configurable": {"thread_id": thread_id},
        "use_existing_checkpoint": use_existing_checkpoint
    }
    try:
        result = workflow.invoke(state, config=config)
        logging.info(f"Workflow completed successfully for thread_id: {thread_id}")
        return result
    except Exception as e:
        logging.error(f"Error in workflow execution: {str(e)}")
        raise
